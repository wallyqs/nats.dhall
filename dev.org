# -*- mode: org; mode: auto-fill -*- 
#+TODO:     ONIT HOLD PAUSED TODO | DONE CANCELED
#+TITLE:    nats.dhall
#+property: :header-args: :results output code

A [[https://dhall-lang.org/][Dhall]] package to work with [[https://nats.io][NATS]] configuration objects.

** NATS.K8S
:properties:
:header-args: :mkdirp true
:end:

*** package.dhall

#+BEGIN_SRC dhall :tangle k8s/package.dhall 
{
  , Cluster = ./cluster/schemas.dhall
  , toList = ./toList.dhall
}
#+END_SRC

**** Cluster

***** schemas.dhall

#+BEGIN_SRC dhall :tangle k8s/cluster/schemas.dhall
{
  , Type = ./type.dhall
  , default = ./default.dhall
}
#+END_SRC

***** type

#+BEGIN_SRC dhall :tangle k8s/cluster/type.dhall
let Cluster : Type = {
  , name : Text
  , image : Text
  , externalAccess : Bool
  , size : Natural
}

in Cluster
#+END_SRC

***** default

#+BEGIN_SRC dhall :tangle k8s/cluster/default.dhall
{
    , name = None Text
    , image = "nats:latest"
    , externalAccess = False
    , size = 1
}
#+END_SRC

**** toList

#+BEGIN_SRC dhall :tangle k8s/toList.dhall
let kubernetes = 
    https://raw.githubusercontent.com/dhall-lang/dhall-kubernetes/master/package.dhall
    sha256:39fa32f6cbdd341cfd2be0aec017c7f6eb554a58bf0262ae222badf3b9c348c0

let kind =
    https://raw.githubusercontent.com/dhall-lang/dhall-kubernetes/4ad58156b7fdbbb6da0543d8b314df899feca077/types.dhall 
    sha256:e48e21b807dad217a6c3e631fcaf3e950062310bfb4a8bbcecc330eb7b2f60ed

let Cluster = ./cluster/type.dhall

let toList = \(nats : Cluster) -> 
  let labels = Some (toMap { app = nats.name })
  let metadata = kubernetes.ObjectMeta::{ 
    , name = nats.name
    , labels = labels
  }

  let clientHostPort = if nats.externalAccess then Some 4222 else None Natural

  let clientPort = kubernetes.ContainerPort::{ 
    , containerPort = 4222
    , name = Some nats.name
    , hostPort = clientHostPort
  }

  -- let svc = kubernetes.Service::{
  --     , metadata = metadata
  --     , spec = kubernetes.ServiceSpec::{
  --       , selector = labels
  --       , type = Some "None"
  --     }
  -- }

  let sts =
      kubernetes.StatefulSet::{
       metadata = metadata,
       spec = Some kubernetes.StatefulSetSpec::{
         serviceName = nats.name,
         selector = kubernetes.LabelSelector::{
           matchLabels = labels
          },
         replicas = Some nats.size,
         template = kubernetes.PodTemplateSpec::{
           metadata = metadata,
           spec = Some kubernetes.PodSpec::{
             containers =
              [ kubernetes.Container::{
                 name = nats.name,
                 image = Some nats.image,
                 ports = Some
                    [
                      clientPort
                    ]
                }
              ]
            }
          }
        }
      }
  in { apiVersion = "v1", kind = "List", items = [ sts ] }

in toList
#+END_SRC

** Example

#+BEGIN_SRC dhall :results output code :exports both
let NATS = ./k8s/package.dhall

let cluster = NATS.Cluster:: {
    , name = "my-nats"
    , image = "nats:latest"
    , externalAccess = True
    , size = 3
}

in NATS.toList cluster
#+END_SRC

#+BEGIN_SRC yaml
apiVersion: v1
items:
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      labels:
        app: my-nats
      name: my-nats
    spec:
      replicas: 3
      selector:
        matchLabels:
          app: my-nats
      serviceName: my-nats
      template:
        metadata:
          labels:
            app: my-nats
          name: my-nats
        spec:
          containers:
            - image: nats:latest
              name: my-nats
              ports:
                - containerPort: 4222
                  hostPort: 4222
                  name: my-nats
kind: List
#+END_SRC
